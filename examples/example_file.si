
// matrix demo -------------------------------------------------------------------------------------

var m1 : Mat#Int = [1](2, 2)
print("" + m1)  // [[1, 1], [1, 1]]

var m2 : Mat#Int = [[1, 2], [3, 4]]
var m3 : Mat#Int = m1 + m2
print("" + m3)                  // [[2, 3], [4, 5]]
print("" + (m1 << m3))          // all elements of m1 are lower than m3 : true
print("" + (m1 =? m3))          // at least one element equal between m1 and m3 : false
print("" + (m1 =? [1](2, 2)))   // at least a 1 in the matrix : true

print("" + m2[1])       // [3, 4]
print("" + m2[1][1])    // 4

var m4 : Mat#Int = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("" + m4[:2])      // [[1, 2, 3], [4, 5, 6]]
print("" + m4[1:])      // [[4, 5, 6], [7, 8, 9]]


// vectorized function demo ------------------------------------------------------------------------

fun simple_add(a : Int, b : Int) : Int {
    return a + b
}

print("" + simple_add(2, 2))                            // 4
print("" + simple_add([1](2, 2), [[1, 2], [3, 4]]))     // [[2, 3], [4, 5]]
print("" + simple_add([2](2, 2), [1](2, 2)))            // vectorized case, prints [[3, 3], [3, 3]]

// case demo ---------------------------------------------------------------------------------------

var c: Mat#Int = [[1, 2], [3, 4]]

case c {
   [] : {print("Is empty")},
   [_, [1, 2]] : {print("_ must match at least 1 element")},
   [_, [3, 4]] : {print("Good")},
   default : {print("Default")}
} // "Good"


var m_case : Mat#Int = [[1, 2], [3, 4]]
case m_case {
    [[1, 2]] : {print("1")},
    [[1, _], [_, 5]] : {print("2")},
    [[1, 2], _] : {print("3")},
    default : {print("4")}
} // 3


var a : String = "aaabbb"
case a {
    "c"+_ : {print("aa_")},
    "a_b_" : {print("a_b_")},  // the _ is in the string
    _ + "b" : {print("_b")},
    default : {print("default")}
} // _b


// generic type demo -------------------------------------------------------------------------------

fun generic_simple(arg1 : T) : T {
    return arg1 * 5
}

fun generic_example(a : T, b : Int) : T {
    var tmp : T = a + b
    return tmp
}

fun generic_args(arg1 : T, arg2 : Int) : T{
    var tmp1 : T = arg1 + 10
    var tmp2 : T = tmp1 * arg2
    return tmp2
}

fun generic_two(arg1 : T, arg2 : U) : U {
    var tmp1 : T = arg1 * 2
    var tmp2 : U = tmp1 + arg2
    return tmp2
}

print("" + generic_simple(10))          // 50
print("" + generic_example(2.5, 2))     // 4.5
print("" + generic_args([1, 2, 3], 2))  // [[22, 24, 26]]
print("" + generic_two(5, [1](3, 4)))   // [[11, 11, 11, 11], [11, 11, 11, 11], [11, 11, 11, 11]]


// generic function mix with vectorized ------------------------------------------------------------

var i: Int = 5
var mat: Mat#Int = [1](2, 2)

fun remove_smth(a: Int, n: T): T
 {
    return a - n
}

print("" + remove_smth(mat, i))  // [[-4, -4], [-4, -4]]



