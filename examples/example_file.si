
// matrix demo ----------------------------------------------------------------------------------------------------------

var m1 : Mat#Int = [1](2, 2)
print("" + m1)

var m2 : Mat#Int = [[1, 2], [3, 4]]
var m3 : Mat#Int = m1 + m2
print("" + m3)
print("" + (m1 << m3))      // all elements of m1 are lower than m3
print("" + (m1 =? m3))      // at least one element equal between m1 and m3
print("" + (m1 =? [1](2, 2)))    // at least a 1 in the matrix


// vectorized function demo --------------------------------------------------------------------------------------------

fun simple_add(value1 : Int, value2 : Int) : Int {
    return value1 + value2
}

print("" + simple_add(5, 3))                            // 8
print("" + simple_add([1](2, 2), [[1, 2], [3, 4]]))     // [[2, 3], [4, 5]]


// case demo -----------------------------------------------------------------------------------------------------------

var c: Mat#Int = [[1, 2], [3, 4]]

case c {
   [] : {print("Is empty")},
   [_, [1, 2]] : {print("_ must match at least 1 element")},
   [_, [3, 4]] : {print("Good")},
   default : {print("Default")}
}



// generic type demo ---------------------------------------------------------------------------------------------------

fun generic_simple(arg1 : T) : T {
    return arg1 * 5
}

fun generic_args(arg1 : T, arg2 : Int) : T{
    var tmp1 : T = arg1 + 10
    var tmp2 : T = tmp1 * arg2
    return tmp2
}

fun generic_two(arg1 : T, arg2 : U) : U {
    var tmp1 : T = arg1 * 2
    var tmp2 : U = tmp1 + arg2
    return tmp2
}

print("" + generic_simple(10))
print("" + generic_args([1, 2, 3], 2))
print("" + generic_two(5, [1](3, 4)))


// generic function mix with vectorized --------------------------------------------------------------------------------
var i: Int = 5

var mat: Mat#Int = [1](2, 2)

fun remove_smth(a: Int, n: T): T
 {
    return a - n
}

print("" + remove_smth(mat, i))

// matrix
// vectorized function
// generic type
// case


