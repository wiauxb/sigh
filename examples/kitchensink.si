// This file showcases every single syntactic feature in the language.

fun array_add (a: Int[]): Int
{
    fun add (a: Int, b: Int): Int {
        return add2(a, b) // works!

        fun add2 (a: Int, b: Int): Int {
            return a + b
        }
    }

    if (a.length == 0)
        return 0

    var i: Int = 1
    var result: Int = a[0]

    while i < a.length {
        result = add(result, a[i])
        i = i + 1
    }

    return result
}

var total: Int = array_add([1, 2, 3])
var float_total: Float = total + 0.0

var math: Int = 1 + 3 * 4 * (1 + 3) / 12
validate5(math)
validate5(6) // some men just want to watch the world burn

fun validate5 (value: Int)
{
    if (value!= 5)
        print("We wanted 5 but got: " + value)

    if (value > 5)
        print("It was too big.")
    else if (value < 5)
        print("It was too small.")
    else
        print("It's just right.")
}

struct Pair {
    var a: Int
    var b: Int
}

var type: Type = Pair
print("" + type)

fun sum_pair (pair: Pair): Int {
    return pair.a + pair.b
}

validate5(sum_pair($Pair(2, 3)))

fun use_array (array: Int[]) {}

var intArray: Int[] = []
var stringArray: String[] = []
use_array([])

//-----------------------------------------------------------------//

var arr: Int[] = [1, 2, 3]
var long: Int = arr.length
print("" + long)

var matrix1: Mat#Int = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
var matrix2: Mat#Int = [1](3)
var matrix3: Mat#Float = [4.2](2, 3)
var matrix4: Mat#String = ["hello"](3, 3)
var len: Int[] = matrix3.shape
print("" + matrix1)
print("" + matrix2)
print("" + matrix3)
print("" + matrix4)
print("" + len)

//var sliced1: Int[] = arr[:]
//var sliced2: Int[] = arr[1:]
//var sliced3: Int[] = arr[:2]
var sliced4: Int[] = arr[1:2]
//("" + sliced1)
//print("" + sliced2)
//print("" + sliced3)
print("" + sliced4)

//print("" + (matrix1 == matrix2))
//print("" + (matrix1 << matrix2))
//print("" + (matrix1 =? matrix2))
print("" + (matrix1[0] <=> arr))

//--------------------------------------

var matrix1: Mat#Float = [1.0](2, 2)
var matrix2: Mat#Float = [1.0](2, 2)

print("" + matrix1)
print("" + matrix2)

print("" + (matrix1 <=> matrix2))
print("" + (matrix1 !<=> matrix2))
print("" + (matrix1 <<  matrix2))
print("" + (matrix1 >>  matrix2))
print("" + (matrix1 <<= matrix2))
print("" + (matrix1 >>= matrix2))
print("" + (matrix1 =?  matrix2))
print("" + (matrix1 <?  matrix2))
print("" + (matrix1 >?  matrix2))
print("" + (matrix1 <=? matrix2))
print("" + (matrix1 >=? matrix2))

//-----------------------------------------------
print("-----------")
var matrix3: Mat#Int = [[1, 2], [3, 4]]
var matrix4: Mat#Int = [[5, 6], [7, 8]]
var matrix5: Mat#Int = [[0, 6], [4, 4]]

print("" + matrix3)

print("" + (matrix3 <=> matrix4))
print("dif " + (matrix3 !<=> matrix4))
print("" + (matrix3 =?  matrix4))
print("dif " + (matrix3 !=?  matrix4))
print("" + (matrix3 <<  matrix4))
print("" + (matrix4 >>  matrix3))
print("" + (matrix3 <<= matrix4))
print("" + (matrix4 >>= matrix3))
print("" + (matrix3 <?  matrix4))
print("" + (matrix3 <?  matrix5))
print("" + (matrix4 >?  matrix3))
print("" + (matrix3 >?  matrix5))
print("" + (matrix3 <=? matrix4))
print("" + (matrix3 <=? matrix5))
print("" + (matrix4 >=? matrix3))
print("" + (matrix3 >=? matrix5))

print("-------------------")
print("" + (0 <=> [0](2, 2)))
print("" + ([0](2, 2) <=> 0))
print("" + (matrix5 << 0))
print("" + (matrix5 <=? 0))

print("-------------------")
print("" + matrix5)
print("" + (matrix5 % 3))
print("" + (matrix1 @ matrix4))
print("" + (1 @ matrix4))
print("-------------------")
print("" + ([2, 3] @ [[4], [5]]))

//--------------------------------


case arr {
    [] : {},
    [1, _] : {},
    [_, 5] : {},
    [_, 8, _] : {}
    //default : {}
}